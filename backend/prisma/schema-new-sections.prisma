generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testResults        TestResult[]
  purchasedPackages  UserPackage[]
  courseProgress     CourseProgress[]
  sectionProgress    SectionProgress[]

  @@map("users")
}

model Package {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  price       Float
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses      PackageCourse[]
  userPackages UserPackage[]

  @@map("packages")
}

model PackageCourse {
  id        String   @id @default(uuid())
  packageId String
  courseId  String
  addedAt   DateTime @default(now())

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([packageId, courseId])
  @@map("package_courses")
}

model UserPackage {
  id           String   @id @default(uuid())
  userId       String
  packageId    String
  purchasedAt  DateTime @default(now())
  expiresAt    DateTime?
  isActive     Boolean  @default(true)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([userId, packageId])
  @@map("user_packages")
}

model Cycle {
  id        String   @id @default(uuid())
  name      String   @unique
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  niveaux Niveau[]

  @@map("cycles")
}

model Niveau {
  id        String   @id @default(uuid())
  name      String   @unique
  cycleId   String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cycle   Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  courses Course[]

  @@map("niveaux")
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  category    String
  niveauId    String
  imageUrl    String?
  order       Int      @default(0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  niveau          Niveau            @relation(fields: [niveauId], references: [id], onDelete: Cascade)
  sections        CourseSection[]   // Sections hiérarchiques
  tests           Test[]            // Tests globaux du cours
  packageCourses  PackageCourse[]
  courseProgress  CourseProgress[]  // Progression par utilisateur

  @@map("courses")
}

// Nouvelle table pour les sections hiérarchiques
model CourseSection {
  id          String   @id @default(uuid())
  courseId    String
  parentId    String?  // null = section racine, sinon = sous-section
  title       String
  content     String?  @db.Text // Contenu de la section (peut être null si c'est juste un conteneur)
  order       Int      @default(0) // Ordre d'affichage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  parent          CourseSection?    @relation("SectionHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        CourseSection[]   @relation("SectionHierarchy") // Sous-sections
  tests           Test[]            // Tests associés à cette section
  sectionProgress SectionProgress[] // Progression par utilisateur sur cette section

  @@map("course_sections")
}

// Suivi de la progression d'un utilisateur sur un cours
model CourseProgress {
  id                  String   @id @default(uuid())
  userId              String
  courseId            String
  lastSectionId       String?  // Dernière section consultée
  completionPercent   Float    @default(0) // Pourcentage de complétion basé sur les tests réussis
  startedAt           DateTime @default(now())
  lastAccessedAt      DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_progress")
}

// Suivi de la progression sur chaque section
model SectionProgress {
  id          String   @id @default(uuid())
  userId      String
  sectionId   String
  visited     Boolean  @default(false) // Si la section a été visitée
  visitedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  section CourseSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([userId, sectionId])
  @@map("section_progress")
}

model Test {
  id            String   @id @default(uuid())
  title         String
  description   String   @db.Text
  courseId      String?  // Tests globaux du cours (optionnel)
  sectionId     String?  // Tests associés à une section (optionnel)
  duration      Int      // durée en minutes
  passingScore  Int      @default(70) // score minimum pour réussir (en %)
  imageUrl      String?
  isPublished   Boolean  @default(false)
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  course    Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  section   CourseSection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  questions Question[]
  results   TestResult[]

  @@map("tests")
}

model Question {
  id       String       @id @default(uuid())
  testId   String
  question String       @db.Text
  type     QuestionType @default(SINGLE_CHOICE)
  points   Int          @default(1)
  order    Int          @default(0)

  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  options Option[]

  @@map("questions")
}

model Option {
  id         String  @id @default(uuid())
  questionId String
  text       String
  isCorrect  Boolean @default(false)
  order      Int     @default(0)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("options")
}

model TestResult {
  id          String   @id @default(uuid())
  userId      String
  testId      String
  score       Float    // score en pourcentage
  answers     Json     // Stocke les réponses de l'utilisateur
  passed      Boolean
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("test_results")
}
